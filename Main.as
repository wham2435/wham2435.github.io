package 
{
	import flash.display.MovieClip;
	import flash.display.Stage;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.display.Sprite;
	import flash.display.DisplayObject;
	import flash.geom.Point;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.ui.Keyboard;
	import flash.events.MouseEvent;
	import KeyObject;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.net.URLRequest;

	public class Main extends MovieClip
	{
		public var player:Player;
		public var player2:Player2;
		public var goal:Goal;
		public var pressJump:PressJump;
		public var p1Forfeit:P1Forfeit;
		public var p2Forfeit:P2Forfeit;
		public var p3Forfeit:P3Forfeit;
		public var p4Forfeit:P4Forfeit;
		public var key:KeyObject;
		public var blockHolder:Sprite = new Sprite();
		public var blockIdentifier:Array = [];
		
		public var numPlayers:int = 1;
		public var difficulty:int = 1;
		
		public var p1Win:Boolean = false;
		public var p2Win:Boolean = false;
		public var p3Win:Boolean = false;
		public var p4Win:Boolean = false;
		
		public var p1CheckpointX:Number = 0;
		public var p1CheckpointY:Number = 0;
		public var p2CheckpointX:Number = 0;
		public var p2CheckpointY:Number = 0;
		public var p3CheckpointX:Number = 0;
		public var p3CheckpointY:Number = 0;
		public var p4CheckpointX:Number = 0;
		public var p4CheckpointY:Number = 0;
		
		public var p1TextTime:int = 0;
		public var p2TextTime:int = 0;
		public var p3TextTime:int = 0;
		public var p4TextTime:int = 0;

		public var currentLevel:int = 0;
		public var row:int = 0;

		public var X:String = 'PLAYER';
		public var G:String = 'GOAL';
		public var K:String = 'KEY';
		public var A:String = 'ENTER';
		public var B:String = 'EXIT';
		
		public var goalX = 0;
		public var goalY = 0;
		public var goalActive:Boolean = false;
		
		public var openerX = 0;
		public var openerY = 0;
		public var keyArray:Array = [];
		public var keyCount:int = 0;
		public var keyCount2:int = 0;
		public var keyTotal:int = 0;
		
		public var enterPortalXArray:Array = [];
		public var enterPortalYArray:Array = [];
		public var exitPortalXArray:Array = [];
		public var exitPortalYArray:Array = [];
		
		//public var verticalBlockTest:Array = [];
		//public var horizontalBlockTest:Array = [];
		
		public var leftPressed:Boolean = false;
		public var rightPressed:Boolean = false;
		public var upPressed:Boolean = false;
		public var downPressed:Boolean = false;
		public var lastUpPressed:Boolean = false;
		public var A_Pressed:Boolean = false;
		public var D_Pressed:Boolean = false;
		public var W_Pressed:Boolean = false;
		public var S_Pressed:Boolean = false;
		public var lastW_Pressed:Boolean = false;
		public var R_Pressed:Boolean = false;
		public var N_Pressed:Boolean = false;
		
		public var scrollX:Number = 0;
		public var scrollY:Number = 0;
		
		public var xSpeed:Number = 0;
		public var ySpeed:Number = 0;
		
		public var scrollX2:Number = 0;
		public var scrollY2:Number = 0;
		
		public var xSpeed2:Number = 0;
		public var ySpeed2:Number = 0;
		
		public var playerX:Number = 0;
		public var playerY:Number = 0;
		public var playerActive:Boolean = false;
		public var xSpeedConstant:Number = 1;
		public var jumpConstant:Number = -20;
		public var falling:Boolean = false;
		public var falling2:Boolean = false;
		public var friction:Number = 0.83;
		public var iceFriction:Number = 0.94;
		public var currentFriction:Number = friction;
		public var currentFriction2:Number = friction;
		public var gravity:Number = .16;
		public var currentGravity:Number = gravity;
		public var currentGravity2:Number = gravity;
		public var gravityMultiplier:Number = 1.06;
		public var numberDeaths:int = 0;
		
		public var leftBumping:Array = [];
		public var rightBumping:Array = [];
		public var upBumping:Array = [];
		public var downBumping:Array = [];
		public var downBumping2:Array = [];
		
		public var iceBumping:Array = [];
		public var iceBumping2:Array = [];
		
		public var conveyorSpeed:Number = 0.6;
		
		public var abovePlatform:Boolean = false;
		public var abovePlatform2:Boolean = false;
		
		public var player3:Player3;

		public var I_Pressed:Boolean = false;//Up
		public var K_Pressed:Boolean = false;//Down
		public var J_Pressed:Boolean = false;//Left
		public var L_Pressed:Boolean = false;//Right
		public var lastI_Pressed:Boolean = false;//Up
		public var Y_Pressed:Boolean = false;//Restart

public var keyCount3:int = 0;

public var scrollX3:Number = 0;
public var scrollY3:Number = 0;
		
public var xSpeed3:Number = 0;
public var ySpeed3:Number = 0;

public var falling3:Boolean = false;
public var currentFriction3:Number = friction;
public var currentGravity3:Number = gravity;

public var iceBumping3:Array = [];
public var abovePlatform3:Boolean = false;
public var downBumping3:Array = [];

public var player4:Player4;

public var T_Pressed:Boolean = false;//Up
public var G_Pressed:Boolean = false;//Down
public var F_Pressed:Boolean = false;//Left
public var H_Pressed:Boolean = false;//Right
public var lastT_Pressed:Boolean = false;//Up
public var U_Pressed:Boolean = false;//Restart

public var keyCount4:int = 0;

public var scrollX4:Number = 0;
public var scrollY4:Number = 0;
		
public var xSpeed4:Number = 0;
public var ySpeed4:Number = 0;

public var falling4:Boolean = false;
public var currentFriction4:Number = friction;
public var currentGravity4:Number = gravity;

public var iceBumping4:Array = [];
public var abovePlatform4:Boolean = false;
public var downBumping4:Array = [];

public var lvlArray6:Array = [];
public var lvlArrayPlus6:Array = [];

		public var musicPlaying:Boolean = false;
		public var snd_ChibiNinja:Sound = new Sound();
		public var req_ChibiNinja:URLRequest = new URLRequest ("ChibiNinja.mp3");
		public var sndChn_ChibiNinja = new SoundChannel();
		public var snd_DigitalNative:Sound = new Sound();
		public var req_DigitalNative:URLRequest = new URLRequest ("DigitalNative.mp3");
		public var sndChn_DigitalNative = new SoundChannel();
		public var snd_ComeandFindMe:Sound = new Sound();
		public var req_ComeandFindMe:URLRequest = new URLRequest ("ComeandFindMe.mp3");
		public var sndChn_ComeandFindMe = new SoundChannel();
		public var snd_AllofUs:Sound = new Sound();
		public var req_AllofUs:URLRequest = new URLRequest ("AllofUs.mp3");
		public var sndChn_AllofUs = new SoundChannel();
		public var snd_SingleTone:Sound = new Sound();
		public var req_SingleTone:URLRequest = new URLRequest ("SingleTone.mp3");
		public var sndChn_SingleTone = new SoundChannel();
		public var snd_ANightOfDizzySpells:Sound = new Sound();
		public var req_ANightOfDizzySpells:URLRequest = new URLRequest ("ANightOfDizzySpells.mp3");
		public var sndChn_ANightOfDizzySpells = new SoundChannel();
		public var snd_HHavok:Sound = new Sound();
		public var req_HHavok:URLRequest = new URLRequest ("HHavok.mp3");
		public var sndChn_HHavok = new SoundChannel();
		
		/* LEVEL TEMPLATE
		public var lvlArray_:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);*/

		
		public var lvlArray2:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,
		1,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,2,2,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,2,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,5,0,0,0,1,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,5,5,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1,0,1,
		1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1,1,1,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,X,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,1,1,1,1,0,1,1,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,K,6,0,4,4,4,0,0,3,3,0,0,0,0,2,6,0,0,0,0,0,G,0,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,3,3,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArray5:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,1,
		1,0,1,1,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,0,0,0,0,1,1,1,1,1,5,5,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,K,0,6,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,6,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,0,0,0,0,0,0,4,0,0,1,
	    1,1,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,2,2,2,6,0,6,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,0,0,0,0,6,0,0,1,
		1,0,X,1,0,0,0,6,0,0,0,0,0,0,5,1,0,1,0,0,6,6,6,6,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,0,0,6,0,0,0,0,6,2,6,0,0,1,
		1,0,0,1,6,0,0,6,0,0,0,0,0,0,0,1,0,1,5,2,6,6,0,0,6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,K,6,6,6,6,6,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,5,5,5,5,6,6,0,6,0,0,6,0,0,6,0,6,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,2,2,0,0,1,0,1,0,0,0,0,6,6,6,0,6,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,6,6,6,6,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,6,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,6,6,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,2,6,0,0,0,0,1,
		1,0,0,1,0,6,6,6,0,0,3,0,0,0,0,1,0,1,0,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,0,0,6,K,0,0,0,0,0,0,0,0,0,0,K,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,2,0,0,6,6,0,6,6,0,0,6,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,0,6,0,6,0,0,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,4,0,0,1,0,1,0,0,0,5,5,0,0,6,0,6,6,0,0,6,0,6,6,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,0,6,6,0,6,0,6,6,6,0,6,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,6,6,6,6,6,1,1,1,1,2,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,4,0,0,0,0,1,0,1,0,3,3,3,3,3,6,6,6,6,6,6,0,0,6,6,6,6,6,0,0,0,0,1,1,1,1,0,6,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,6,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,0,6,0,0,6,0,6,0,0,6,6,6,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,6,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,6,0,6,6,6,0,0,6,6,6,6,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,6,0,6,6,6,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,6,1,5,5,5,5,5,5,5,5,5,1,6,1,0,1,2,1,4,0,1,1,1,1,1,6,6,0,6,6,0,0,6,6,6,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
	    1,0,0,0,5,5,5,5,5,5,5,5,5,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,6,0,6,6,0,0,6,0,6,6,0,0,0,1,1,1,1,2,2,1,1,1,1,6,6,6,6,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,3,1,0,0,0,0,6,6,6,6,6,0,0,6,6,6,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,K,0,1,1,1,1,1,0,K,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,4,0,1,0,0,0,0,6,0,6,0,6,6,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,6,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,3,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,1,0,0,1,0,0,0,0,0,0,0,0,6,6,0,0,6,6,0,6,0,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,2,2,1,0,0,6,0,0,1,4,0,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,6,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,6,6,6,6,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,
		1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,6,0,0,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,0,0,6,0,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,
		1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,6,0,0,1,2,2,2,2,2,2,0,0,0,0,0,0,6,6,0,0,6,6,0,6,0,1,1,1,1,0,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,G,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,
		1,6,6,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,6,6,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArray1:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,3,3,3,3,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,4,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,X,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,6,0,0,0,0,0,0,6,1,1,0,0,0,0,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArray4:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,0,6,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,0,6,5,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		6,0,0,6,0,0,6,0,0,0,0,0,0,0,0,2,0,0,0,0,0,K,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		6,0,2,6,0,0,6,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,1,
		6,0,0,6,0,0,6,5,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		6,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		6,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,2,6,4,6,3,2,4,6,3,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		6,0,0,6,0,0,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		6,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,2,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,6,5,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,2,6,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,X,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,3,0,0,0,0,4,0,0,0,0,0,1,1,1,1,1,0,0,0,0,6,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,6,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArray3:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,7,7,5,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,7,7,0,7,0,7,0,7,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,4,0,6,0,0,0,7,7,5,5,5,5,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,1,1,
		1,6,K,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,1,
		1,0,7,7,7,7,7,7,5,7,7,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,6,6,6,K,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,6,6,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,6,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,2,2,2,0,6,6,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,7,7,7,7,7,7,0,7,0,7,0,7,7,7,7,7,7,6,6,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,7,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,7,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,7,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,6,6,6,6,6,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,7,7,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,1,0,1,0,0,1,
		1,0,X,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,0,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,0,0,0,0,1,
		1,1,1,1,7,7,7,7,0,0,7,7,7,0,0,7,7,7,7,7,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
		);
		
		//Hard Levels
		
		public var lvlArrayPlus1:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,6,6,0,0,0,6,6,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,6,6,6,1,0,0,0,0,0,0,1,1,1,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,6,6,1,6,6,6,6,6,6,6,6,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,4,4,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,6,6,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,1,0,0,0,0,0,6,0,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,4,0,0,1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,1,0,0,1,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,3,3,3,0,1,1,0,0,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,6,0,0,1,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,5,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,3,3,3,4,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,5,1,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,6,6,6,6,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,4,4,0,1,0,1,0,0,0,0,0,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,5,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,2,0,2,0,2,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,6,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,6,3,0,1,1,1,1,0,3,3,1,5,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,4,4,0,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,1,1,1,1,0,3,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,2,1,1,1,1,1,4,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,3,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,
		1,0,X,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,3,3,3,3,1,6,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,6,1,6,6,6,6,0,0,6,6,6,0,0,0,0,0,0,6,1,6,0,0,0,0,2,1,
		1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,6,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArrayPlus2:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,K,0,0,0,0,0,1,
		1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,
		1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,2,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,3,2,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,3,2,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,6,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,6,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,6,1,6,0,0,0,0,0,0,0,6,0,0,0,0,1,6,6,1,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,6,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,6,0,0,1,6,0,0,0,0,5,5,5,0,0,0,0,0,0,0,6,1,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,1,0,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,5,6,0,0,1,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,6,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,6,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1,0,1,
		1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,6,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,1,6,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,1,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1,1,1,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,X,0,0,0,1,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,K,0,0,4,4,4,0,0,3,3,0,0,0,0,2,0,0,0,0,0,0,G,0,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,4,4,4,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArrayPlus3:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,6,6,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,7,7,0,7,0,7,0,7,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,4,6,6,0,0,0,7,7,5,5,5,5,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,1,1,
		1,6,0,0,0,0,0,0,0,6,6,6,6,0,0,6,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,2,1,
		1,6,0,7,7,7,7,7,7,7,7,7,6,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,6,6,6,2,1,
		1,0,2,5,5,5,5,5,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,K,0,0,K,6,6,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,6,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,2,2,2,0,6,6,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,2,7,7,7,7,7,7,0,7,0,7,0,7,7,7,7,7,7,6,6,0,7,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,0,0,7,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,7,7,7,0,0,7,0,0,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,7,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,7,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,6,6,6,6,6,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,7,7,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,1,1,1,0,0,0,0,3,6,6,3,6,3,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,7,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,0,1,0,0,1,
		1,0,X,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,6,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6,6,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,0,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,0,0,0,0,1,
		1,1,1,1,7,7,0,0,0,0,7,7,0,0,0,7,7,7,7,7,0,0,0,0,0,0,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,
		1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1
		);
		
		public var lvlArrayPlus4:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,6,0,6,0,0,0,0,0,0,0,2,0,0,0,0,0,K,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,6,0,6,5,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,K,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,1,
		6,0,2,6,0,6,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,1,5,5,5,5,5,5,5,5,5,5,5,6,6,6,3,0,4,1,1,3,0,4,6,1,
		6,0,0,6,0,6,5,6,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,1,0,0,0,0,0,6,1,
		6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,0,1,0,1,0,0,0,6,1,
		6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,2,6,6,6,3,6,4,6,6,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,1,0,1,0,0,0,6,1,
		6,0,0,6,0,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,1,1,0,1,1,1,1,6,1,
		6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,1,0,0,0,0,0,0,6,1,
		1,2,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,1,1,1,1,1,1,0,6,1,
		1,0,0,6,0,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,1,1,1,1,1,1,0,6,1,
		1,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,0,0,0,0,1,0,0,6,1,
		1,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1,1,1,0,1,0,0,6,1,
		1,0,0,6,0,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,1,0,1,0,0,6,1,
		1,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,7,3,3,3,3,3,7,7,4,4,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,1,0,1,0,1,0,0,6,1,
		1,0,2,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,1,0,0,0,1,0,0,6,1,
		1,0,0,6,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,1,1,1,1,1,0,0,6,1,
		1,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,0,0,0,0,0,0,0,6,1,
		1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,5,5,1,1,1,1,6,1,
		1,0,0,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,1,0,0,0,0,1,
		1,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,0,0,0,0,1,0,5,1,0,1,
		1,2,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,1,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,6,0,1,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,6,6,6,0,1,0,1,1,0,1,
		1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,1,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,1,0,0,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,6,6,0,0,0,0,1,0,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,1,1,1,1,0,0,1,0,1,
		1,0,X,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,1,0,1,
		1,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,3,0,0,0,0,4,0,0,0,0,0,3,3,3,4,4,0,0,0,0,6,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,6,6,1,1,1,1,1,1,1,1,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,K,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		public var lvlArrayPlus5:Array = new Array(
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,1,
		1,0,1,1,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,0,0,0,0,1,1,1,1,1,5,5,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,K,0,6,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,6,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,0,0,0,0,0,0,4,0,0,1,
	    1,1,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,2,2,2,6,0,6,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,0,0,0,0,6,0,0,1,
		1,0,X,1,0,0,0,6,0,0,0,0,0,0,5,1,0,1,0,0,6,6,6,6,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,0,0,6,0,0,0,0,6,2,6,0,0,1,
		1,0,0,1,6,0,0,6,0,0,0,0,0,0,0,1,0,1,5,2,6,6,0,0,6,0,0,6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,K,6,6,6,6,6,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,5,5,5,5,6,6,0,6,0,0,6,0,0,6,0,6,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,2,2,0,0,1,0,1,0,0,0,0,6,6,6,0,6,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,0,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,6,6,6,6,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,0,0,6,0,0,0,0,1,
		1,0,6,1,0,0,0,6,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,6,6,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,2,6,0,0,0,0,1,
		1,0,0,1,0,6,6,6,0,0,3,0,0,0,0,1,0,1,0,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,0,0,6,K,0,0,0,0,0,0,0,0,0,0,K,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,2,2,0,0,6,6,0,6,6,0,0,6,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,0,6,0,6,0,0,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,4,0,0,1,0,1,0,0,0,5,5,0,0,6,0,6,6,0,0,6,0,6,6,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,6,0,6,6,0,6,0,6,6,6,0,6,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,6,6,6,6,6,1,1,1,1,2,6,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,4,0,0,0,0,1,0,1,0,3,3,3,3,3,6,6,6,6,6,6,0,0,6,6,6,6,6,0,0,0,0,1,1,1,1,0,6,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,6,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,0,6,0,0,6,0,6,0,0,6,6,6,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,6,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,6,6,0,6,6,6,0,0,6,6,6,6,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,6,0,6,6,6,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,0,6,6,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,6,1,5,5,5,5,5,5,5,5,5,1,6,1,0,1,2,1,4,0,1,1,1,1,1,6,6,0,6,6,0,0,6,6,6,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
	    1,0,0,0,5,5,5,5,5,5,5,5,5,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,6,0,6,6,0,0,6,0,6,6,0,0,0,1,1,1,1,2,2,1,1,1,1,6,6,6,6,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,3,1,0,0,0,0,6,6,6,6,6,0,0,6,6,6,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,K,0,1,1,1,1,1,0,K,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,6,0,6,6,6,0,0,6,6,0,6,0,0,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,4,0,1,0,0,0,0,6,0,6,0,6,6,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,6,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,6,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,3,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,1,0,0,1,0,0,0,0,0,0,0,0,6,6,0,0,6,6,0,6,0,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,
		1,0,0,0,0,0,0,0,0,0,0,2,2,1,0,0,6,0,0,1,4,0,1,0,0,0,0,0,0,0,6,6,6,0,0,6,6,6,0,6,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,6,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,6,6,6,6,0,1,1,1,1,2,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,
		1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,6,0,0,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,0,0,6,0,6,0,0,1,1,1,1,0,0,1,1,1,1,K,0,K,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,
		1,0,0,0,0,0,0,0,0,0,2,2,2,1,0,0,6,0,0,1,2,2,2,2,2,2,0,0,0,0,0,0,6,6,0,0,6,6,0,6,0,1,1,1,1,0,2,1,1,1,1,0,K,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,
		1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,G,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,
		1,6,6,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,6,6,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		);
		
		//0 - Nothing
		//1 - Wall
		//2 - Spring
		//3 - Left Conveyor
		//4 - Right Conveyor
		//5 - Platform
		//6 - Spike
		//X - Player
		//G - Goal
		
		public function Main()
		{
			//player = new Player(stage,40,352);
			//stage.addChild(player);
			
			key = new KeyObject(stage);
			
			gotoAndStop(2);
			possibility.gotoAndStop(1);
			difficulty = 1;

			stage.addChild(blockHolder);
			
			addPlayer.addEventListener(MouseEvent.CLICK, addAPlayer);
			subtractPlayer.addEventListener(MouseEvent.CLICK, subtractAPlayer);
			begin1.addEventListener(MouseEvent.CLICK, beginNow);
			
			difficultyUp.addEventListener(MouseEvent.CLICK, technicallyPossible);
			difficultyDown.addEventListener(MouseEvent.CLICK, possible);
			
			addEventListener(Event.ENTER_FRAME, textLoop);
			
			snd_ChibiNinja.addEventListener(Event.COMPLETE, load_ChibiNinja);
			snd_ChibiNinja.load(req_ChibiNinja);
		}
		
		public function load_ChibiNinja(event:Event):void
		{
			var ChibiNinja:Sound = event.target as Sound;
			sndChn_ChibiNinja = ChibiNinja.play(0,int.MAX_VALUE);
		}
		
		public function load_DigitalNative(event:Event):void
		{
			var DigitalNative:Sound = event.target as Sound;
			sndChn_DigitalNative = DigitalNative.play(0,int.MAX_VALUE);
		}
		
		public function load_AllofUs(event:Event):void
		{
			var AllofUs:Sound = event.target as Sound;
			sndChn_AllofUs = AllofUs.play(0,int.MAX_VALUE);
		}
		
		public function load_ComeandFindMe(event:Event):void
		{
			var ComeandFindMe:Sound = event.target as Sound;
			sndChn_ComeandFindMe = ComeandFindMe.play(0,int.MAX_VALUE);
		}
		
		public function load_SingleTone(event:Event):void
		{
			var SingleTone:Sound = event.target as Sound;
			sndChn_SingleTone = SingleTone.play(0,int.MAX_VALUE);
		}
		
		public function load_ANightOfDizzySpells(event:Event):void
		{
			var ANightOfDizzySpells:Sound = event.target as Sound;
			sndChn_ANightOfDizzySpells = ANightOfDizzySpells.play(0,int.MAX_VALUE);
		}
		
		public function load_HHavok(event:Event):void
		{
			var HHavok:Sound = event.target as Sound;
			sndChn_HHavok = HHavok.play(0,int.MAX_VALUE);
		}
		
		public function textLoop(e:Event)
		{
			if(numPlayers == 1)
			{
				if(difficulty == 1)
				{
					possibility.gotoAndStop(1);
				}
				else if(difficulty == 2)
				{
					possibility.gotoAndStop(2);
				}
			}
			else if(numPlayers == 2)
			{
				if(difficulty == 1)
				{
					possibility2.gotoAndStop(1);
				}
				else if(difficulty == 2)
				{
					possibility2.gotoAndStop(2);
				}
			}
			else if(numPlayers == 3)
			{
				if(difficulty == 1)
				{
					possibility3.gotoAndStop(1);
				}
				else if(difficulty == 2)
				{
					possibility3.gotoAndStop(2);
				}
			}
			if(numPlayers == 4)
			{
				if(difficulty == 1)
				{
					possibility4.gotoAndStop(1);
				}
				else if(difficulty == 2)
				{
					possibility4.gotoAndStop(2);
				}
			}
		}
		
		public function addAPlayer(event:MouseEvent):void
		{
 	 		if(currentFrame == 2)
			{
				gotoAndStop(3);
				numPlayers = 2;
				begin2.addEventListener(MouseEvent.CLICK, beginNow);
			}
			else if(currentFrame == 3)
			{
				gotoAndStop(4);
				numPlayers = 3;
				begin3.addEventListener(MouseEvent.CLICK, beginNow);
			}
			else if(currentFrame == 4)
			{
				gotoAndStop(5);
				numPlayers = 4;
				begin4.addEventListener(MouseEvent.CLICK, beginNow);
			}
		}

		public function subtractAPlayer(event:MouseEvent):void
		{ 
 	 		if(currentFrame == 5)
			{
				gotoAndStop(4);
				numPlayers = 3;
				begin3.addEventListener(MouseEvent.CLICK, beginNow);
			}
			else if(currentFrame == 4)
			{
				gotoAndStop(3);
				numPlayers = 2;
				begin2.addEventListener(MouseEvent.CLICK, beginNow);
			}
			else if(currentFrame == 3)
			{
				gotoAndStop(2);
				numPlayers = 1;
				begin1.addEventListener(MouseEvent.CLICK, beginNow);
			}
		}

		public function beginNow(event:MouseEvent):void
		{
			currentLevel = 1;
			
			if(difficulty == 1)
			{
				createLevel();
				gotoAndStop(1);
			}
			else if(difficulty == 2)
			{
				createLevelPlus();
				gotoAndStop(1);
			}
			else
			{
				trace('ERROR');
			}
				
			addEventListener(Event.ENTER_FRAME, loop, false, 0, true);
			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
		
			//updateScore();
		
			stage.focus = stage;
		}
		
		public function technicallyPossible(event:MouseEvent):void
		{
			difficulty = 2;
		}
		
		public function possible(event:MouseEvent):void
		{
			difficulty = 1;
		}

		public function createLevel():void
		{
			removeEventListener(Event.ENTER_FRAME, textLoop);
			musicPlaying = false;
			
			var lvlArray:Array = MovieClip(root)['lvlArray' + currentLevel];
			//there will always be 38 rows, so this is how we find it out
			if(lvlArray == lvlArray6){
				gotoAndStop(6);
			}
			var lvlColumns:int = Math.ceil(lvlArray.length / 42);
			//create the level
			for (var i:int = 0; i<lvlArray.length; i++)
			{
				if (lvlArray[i] == 1)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newWall:Wall = new Wall();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newWall.y = 0;
					newWall.x = 0;
					//change the coordinates of the block;
					newWall.x = (i - (row - 1) * lvlColumns) * newWall.width;
					newWall.y = (row - 1) * newWall.height;
					//adding it to stage
					blockHolder.addChild(newWall);
					blockIdentifier.push(1);
				}
				else if (lvlArray[i] == 2)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newSpring:Spring = new Spring();
					//drawing the block
					//newSpring.graphics.beginFill(0xFF9900/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newSpring.graphics.drawRect(0,0,25,25);
					//change the coordinates of the block;
					newSpring.x = (i - (row - 1) * lvlColumns) * newSpring.width;
					newSpring.y = (row - 1) * newSpring.height;
					//adding it to stage
					blockHolder.addChild(newSpring);
					blockIdentifier.push(2);
				}
				else if (lvlArray[i] == 3)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newLConveyor:LConveyor = new LConveyor();
					//drawing the block
					//newLConveyor.graphics.beginFill(0x3333FF/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newLConveyor.graphics.drawRect(0,0,25,25);
					//change the coordinates of the block;
					newLConveyor.x = (i - (row - 1) * lvlColumns) * newLConveyor.width;
					newLConveyor.y = (row - 1) * newLConveyor.height;
					//adding it to stage
					blockHolder.addChild(newLConveyor);
					blockIdentifier.push(3);
				}
				else if (lvlArray[i] == 4)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newRConveyor:RConveyor = new RConveyor();
					//drawing the block
					//newRConveyor.graphics.beginFill(0x0099FF/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newRConveyor.graphics.drawRect(0,0,25,25);
					//change the coordinates of the block;
					newRConveyor.x = (i - (row - 1) * lvlColumns) * newRConveyor.width;
					newRConveyor.y = (row - 1) * newRConveyor.height;
					//adding it to stage
					blockHolder.addChild(newRConveyor);
					blockIdentifier.push(4);
				}
				else if (lvlArray[i] == 5)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newPlatform:Platform = new Platform();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newPlatform.y = 0;
					newPlatform.x = 0;
					//change the coordinates of the block;
					newPlatform.x = (i - (row - 1) * lvlColumns) * newPlatform.width;
					newPlatform.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newPlatform);
					blockIdentifier.push(5);
				}
				else if (lvlArray[i] == 6)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newSpike:Spike = new Spike();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newSpike.y = 0;
					newSpike.x = 0;
					//change the coordinates of the block;
					newSpike.x = (i - (row - 1) * lvlColumns) * newSpike.width;
					newSpike.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newSpike);
					blockIdentifier.push(6);
				}
				else if (lvlArray[i] == 7)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newIce:Ice = new Ice();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newIce.y = 0;
					newIce.x = 0;
					//change the coordinates of the block;
					newIce.x = (i - (row - 1) * lvlColumns) * 26;
					newIce.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newIce);
					blockIdentifier.push(7);
				}
				else if (lvlArray[i] == 'ENTER' || lvlArray[i] == 'EXIT')
				{
					var newPortal:Portal = new Portal();
					
					newPortal.y = 0;
					newPortal.x = 0;
					
					newPortal.x = (i - (row - 1) * lvlColumns) * newPortal.width;
					newPortal.y = (row - 1) * newPortal.height;
					
					blockHolder.addChild(newPortal);
					
					if (lvlArray[i] == 'ENTER')
					{
						blockIdentifier.push('ENTER');
						enterPortalXArray.push(newPortal.x);
						enterPortalYArray.push(newPortal.y);
					}
					else if (lvlArray[i] == 'EXIT')
					{
						blockIdentifier.push('EXIT');
						exitPortalXArray.push(newPortal.x);
						exitPortalYArray.push(newPortal.y);
					}
				}
				else if (lvlArray[i] == 'KEY')
				{
					openerX = (i - (row - 1) * lvlColumns) * 26;
					openerY = (row - 1) * 26;
					
					keyTotal ++;
					
					var newOpener = new Opener(openerX,openerY);
					newOpener.gotoAndStop(16);
					stage.addChild(newOpener);
					keyArray.push(newOpener);
				}
				else if (lvlArray[i] == 'GOAL')
				{
					goalX = (i - (row - 1) * lvlColumns) * 26;
					goalY = (row - 1) * 26;
						
					if(!goalActive)
					{
						goal = new Goal(goalX,goalY);
						goal.gotoAndStop(16);
						stage.addChild(goal);
						goalActive = true;
						
						pressJump = new PressJump(goalX + 12.5, goalY + 12.5);
						pressJump.gotoAndStop(2);
						stage.addChild(pressJump);
					}
				}
				else if (lvlArray[i] == 'PLAYER')
				{
					playerX = ((i - (row - 1) * lvlColumns) * newWall.width) + 12.5;
					playerY = ((row - 1) * newWall.height) + 25;
						
					if (!playerActive)
					{
						if(numPlayers >= 4)
						{
							p4Forfeit = new P4Forfeit(playerX, playerY);
							p4Forfeit.gotoAndStop(2);
							stage.addChild(p4Forfeit);
						
							player4 = new Player4(playerX,playerY);
							stage.addChild(player4);
							addEventListener(Event.ENTER_FRAME, player4Loop, false, 0, true);
							player4.gotoAndStop(1);
						}
						
						if(numPlayers >= 3)
						{
							p3Forfeit = new P3Forfeit(playerX, playerY);
							p3Forfeit.gotoAndStop(2);
							stage.addChild(p3Forfeit);

							player3 = new Player3(playerX,playerY);
							stage.addChild(player3);
							addEventListener(Event.ENTER_FRAME, player3Loop, false, 0, true);
							player3.gotoAndStop(1);
						}
						
						if(numPlayers >=2)
						{
							p2Forfeit = new P2Forfeit(playerX, playerY);
							p2Forfeit.gotoAndStop(2);
							stage.addChild(p2Forfeit);

							player2 = new Player2(playerX,playerY);
							stage.addChild(player2);
							addEventListener(Event.ENTER_FRAME, player2Loop, false, 0, true);
							player2.gotoAndStop(1);
						}
						
						p1Forfeit = new P1Forfeit(playerX, playerY);
						p1Forfeit.gotoAndStop(2);
						stage.addChild(p1Forfeit);
						
						player = new Player(playerX,playerY);
						stage.addChild(player);
						addEventListener(Event.ENTER_FRAME, playerLoop, false, 0, true);
						player.gotoAndStop(1);
						
						playerActive = true;
					}
				}
			}
			//reset the row for another use
			row = 0;
		}
		
		public function createLevelPlus():void
		{
			removeEventListener(Event.ENTER_FRAME, textLoop);
			musicPlaying = false;
			
			var lvlArrayPlus:Array = MovieClip(root)['lvlArrayPlus' + currentLevel];
			if(lvlArrayPlus == lvlArrayPlus6){
				gotoAndStop(7);
			}{
			var lvlColumns:int = Math.ceil(lvlArrayPlus.length / 42);
			for (var i:int = 0; i<lvlArrayPlus.length; i++)
			{
				if (lvlArrayPlus[i] == 1)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					var newWall:Wall = new Wall();
					newWall.y = 0;
					newWall.x = 0;
					newWall.x = (i - (row - 1) * lvlColumns) * newWall.width;
					newWall.y = (row - 1) * newWall.height;
					blockHolder.addChild(newWall);
					blockIdentifier.push(1);
				}
				else if (lvlArrayPlus[i] == 2)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					var newSpring:Spring = new Spring();
					newSpring.x = (i - (row - 1) * lvlColumns) * newSpring.width;
					newSpring.y = (row - 1) * newSpring.height;
					//adding it to stage
					blockHolder.addChild(newSpring);
					blockIdentifier.push(2);
				}
				else if (lvlArrayPlus[i] == 3)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newLConveyor:LConveyor = new LConveyor();
					//drawing the block
					//newLConveyor.graphics.beginFill(0x3333FF/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newLConveyor.graphics.drawRect(0,0,25,25);
					//change the coordinates of the block;
					newLConveyor.x = (i - (row - 1) * lvlColumns) * newLConveyor.width;
					newLConveyor.y = (row - 1) * newLConveyor.height;
					//adding it to stage
					blockHolder.addChild(newLConveyor);
					blockIdentifier.push(3);
				}
				else if (lvlArrayPlus[i] == 4)
				{
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newRConveyor:RConveyor = new RConveyor();
					//drawing the block
					//newRConveyor.graphics.beginFill(0x0099FF/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newRConveyor.graphics.drawRect(0,0,25,25);
					//change the coordinates of the block;
					newRConveyor.x = (i - (row - 1) * lvlColumns) * newRConveyor.width;
					newRConveyor.y = (row - 1) * newRConveyor.height;
					//adding it to stage
					blockHolder.addChild(newRConveyor);
					blockIdentifier.push(4);
				}
				else if (lvlArrayPlus[i] == 5)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newPlatform:Platform = new Platform();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newPlatform.y = 0;
					newPlatform.x = 0;
					//change the coordinates of the block;
					newPlatform.x = (i - (row - 1) * lvlColumns) * newPlatform.width;
					newPlatform.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newPlatform);
					blockIdentifier.push(5);
				}
				else if (lvlArrayPlus[i] == 6)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newSpike:Spike = new Spike();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newSpike.y = 0;
					newSpike.x = 0;
					//change the coordinates of the block;
					newSpike.x = (i - (row - 1) * lvlColumns) * newSpike.width;
					newSpike.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newSpike);
					blockIdentifier.push(6);
				}
				else if (lvlArrayPlus[i] == 7)
				{
					//checking if we move onto the next row
					//this checks if i is divisible by the # of columns
					if (i/lvlColumns == int(i/lvlColumns))
					{
						row++;
					}
					//making a new block
					var newIce:Ice = new Ice();
					//drawing the block
					//newWall.graphics.beginFill(0x999999/*The color for shape*/,1/*The alpha for the shape*/);
					//turning the shape into a square
					//newWall.graphics.drawRect(0,0,25,25);
					newIce.y = 0;
					newIce.x = 0;
					//change the coordinates of the block;
					newIce.x = (i - (row - 1) * lvlColumns) * 26;
					newIce.y = (row - 1) * 26;
					//adding it to stage
					blockHolder.addChild(newIce);
					blockIdentifier.push(7);
				}
				else if (lvlArrayPlus[i] == 'ENTER' || lvlArrayPlus[i] == 'EXIT')
				{
					var newPortal:Portal = new Portal();
					
					newPortal.y = 0;
					newPortal.x = 0;
					
					newPortal.x = (i - (row - 1) * lvlColumns) * newPortal.width;
					newPortal.y = (row - 1) * newPortal.height;
					
					blockHolder.addChild(newPortal);
					
					if (lvlArrayPlus[i] == 'ENTER')
					{
						blockIdentifier.push('ENTER');
						enterPortalXArray.push(newPortal.x);
						enterPortalYArray.push(newPortal.y);
					}
					else if (lvlArrayPlus[i] == 'EXIT')
					{
						blockIdentifier.push('EXIT');
						exitPortalXArray.push(newPortal.x);
						exitPortalYArray.push(newPortal.y);
					}
				}
				else if (lvlArrayPlus[i] == 'KEY')
				{
					openerX = (i - (row - 1) * lvlColumns) * 26;
					openerY = (row - 1) * 26;
					
					keyTotal ++;
					
					var newOpener = new Opener(openerX,openerY);
					newOpener.gotoAndStop(16);
					stage.addChild(newOpener);
					keyArray.push(newOpener);
				}
				else if (lvlArrayPlus[i] == 'GOAL')
				{
					goalX = (i - (row - 1) * lvlColumns) * 26;
					goalY = (row - 1) * 26;
						
					if(!goalActive)
					{
						goal = new Goal(goalX,goalY);
						goal.gotoAndStop(16);
						stage.addChild(goal);
						goalActive = true;
						
						pressJump = new PressJump(goalX + 12.5, goalY + 12.5);
						pressJump.gotoAndStop(2);
						stage.addChild(pressJump);
					}
				}
				else if (lvlArrayPlus[i] == 'PLAYER')
				{
					playerX = ((i - (row - 1) * lvlColumns) * newWall.width) + 12.5;
					playerY = ((row - 1) * newWall.height) + 25;
						
					p1CheckpointX = playerX;
					p1CheckpointY = playerY;
					p2CheckpointX = playerX;
					p2CheckpointY = playerY;
					p3CheckpointX = playerX;
					p3CheckpointY = playerY;
					p4CheckpointX = playerX;
					p4CheckpointY = playerY;
					
					if (!playerActive)
					{
						if(numPlayers >= 4)
						{
							p4Forfeit = new P4Forfeit(playerX, playerY);
							p4Forfeit.gotoAndStop(2);
							stage.addChild(p4Forfeit);
						
							player4 = new Player4(playerX,playerY);
							stage.addChild(player4);
							addEventListener(Event.ENTER_FRAME, player4Loop, false, 0, true);
							player4.gotoAndStop(1);
						}
						
						if(numPlayers >= 3)
						{
							p3Forfeit = new P3Forfeit(playerX, playerY);
							p3Forfeit.gotoAndStop(2);
							stage.addChild(p3Forfeit);

							player3 = new Player3(playerX,playerY);
							stage.addChild(player3);
							addEventListener(Event.ENTER_FRAME, player3Loop, false, 0, true);
							player3.gotoAndStop(1);
						}
						
						if(numPlayers >=2)
						{
							p2Forfeit = new P2Forfeit(playerX, playerY);
							p2Forfeit.gotoAndStop(2);
							stage.addChild(p2Forfeit);

							player2 = new Player2(playerX,playerY);
							stage.addChild(player2);
							addEventListener(Event.ENTER_FRAME, player2Loop, false, 0, true);
							player2.gotoAndStop(1);
						}
						
						p1Forfeit = new P1Forfeit(playerX, playerY);
						p1Forfeit.gotoAndStop(2);
						stage.addChild(p1Forfeit);
						
						player = new Player(playerX,playerY);
						stage.addChild(player);
						addEventListener(Event.ENTER_FRAME, playerLoop, false, 0, true);
						player.gotoAndStop(1);
						
						playerActive = true;
					}}
				}
			}
			//reset the row for another use
			row = 0;
		}
		
		public function dead():void
		{
			if(difficulty == 1)
			{
				for (var i:int = 0; i < keyArray.length; i++)
				{
					if (keyArray[i].currentFrame == 2)
					{
						keyArray[i].gotoAndStop(16);
					}
					else if (keyArray[i].currentFrame == 6)
					{
						keyArray[i].gotoAndStop(3);
					}
					else if (keyArray[i].currentFrame == 7)
					{
						keyArray[i].gotoAndStop(4);
					}
					else if (keyArray[i].currentFrame == 8)
					{
						keyArray[i].gotoAndStop(5);
					}
					else if (keyArray[i].currentFrame == 12)
					{
						keyArray[i].gotoAndStop(9);
					}
					else if (keyArray[i].currentFrame == 13)
					{
						keyArray[i].gotoAndStop(10);
					}
					else if (keyArray[i].currentFrame == 14)
					{
						keyArray[i].gotoAndStop(11);
					}
					else if (keyArray[i].currentFrame == 1)
					{
						keyArray[i].gotoAndStop(15);
					}
				}
				
				player.x = playerX;
				player.y = playerY;
			}
			else if(difficulty == 2)
			{
				player.x = p1CheckpointX;
				player.y = p1CheckpointY;
			}
			
			numberDeaths ++;
			
			updateScore();
			
			p1TextTime = 0;
		}
		
		public function dead2():void
		{
			if(difficulty == 1)
			{
				for (var i:int = 0; i < keyArray.length; i++)
				{	
					if (keyArray[i].currentFrame == 3)
					{
						keyArray[i].gotoAndStop(16);
					}
					else if (keyArray[i].currentFrame == 6)
					{
						keyArray[i].gotoAndStop(2);
					}
					else if (keyArray[i].currentFrame == 9)
					{
						keyArray[i].gotoAndStop(4);
					}
					else if (keyArray[i].currentFrame == 10)
					{
						keyArray[i].gotoAndStop(5);
					}
					else if (keyArray[i].currentFrame == 12)
					{
						keyArray[i].gotoAndStop(7);
					}
					else if (keyArray[i].currentFrame == 13)
					{
						keyArray[i].gotoAndStop(8);
					}
					else if (keyArray[i].currentFrame == 15)
					{
						keyArray[i].gotoAndStop(11);
					}
					else if (keyArray[i].currentFrame == 1)
					{
						keyArray[i].gotoAndStop(14);
					}
				}
				
				player2.x = playerX;
				player2.y = playerY;
			}
			else if(difficulty == 2)
			{
				player2.x = p2CheckpointX;
				player2.y = p2CheckpointY;
			}
			
			numberDeaths ++;
			
			updateScore();
			
			p2TextTime = 0;
		}
		
		public function dead3():void
		{
			if(difficulty == 1)
			{
			for (var i:int = 0; i < keyArray.length; i++)
			{
				if (keyArray[i].currentFrame == 4)
				{
					keyArray[i].gotoAndStop(16);
				}
				else if (keyArray[i].currentFrame == 7)
				{
					keyArray[i].gotoAndStop(2);
				}
				else if (keyArray[i].currentFrame == 9)
				{
					keyArray[i].gotoAndStop(3);
				}
				else if (keyArray[i].currentFrame == 11)
				{
					keyArray[i].gotoAndStop(5);
				}
				else if (keyArray[i].currentFrame == 12)
				{
					keyArray[i].gotoAndStop(6);
				}
				else if (keyArray[i].currentFrame == 14)
				{
					keyArray[i].gotoAndStop(8);
				}
				else if (keyArray[i].currentFrame == 15)
				{
					keyArray[i].gotoAndStop(10);
				}
				else if (keyArray[i].currentFrame == 1)
				{
					keyArray[i].gotoAndStop(13);
				}
			}
			player3.x = playerX;
			player3.y = playerY;
			}
			else if(difficulty == 2)
			{
				player3.x = p3CheckpointX;
				player3.y = p3CheckpointY;
			}
			numberDeaths ++;
				
			updateScore();
			
			p3TextTime = 0;
		}
		
		public function dead4():void
		{
			if(difficulty == 1)
			{
			for (var i:int = 0; i < keyArray.length; i++)
			{
				if (keyArray[i].currentFrame == 5)
				{
					keyArray[i].gotoAndStop(16);
				}
				else if (keyArray[i].currentFrame == 8)
				{
					keyArray[i].gotoAndStop(2);
				}
				else if (keyArray[i].currentFrame == 10)
				{
					keyArray[i].gotoAndStop(3);
				}
				else if (keyArray[i].currentFrame == 11)
				{
					keyArray[i].gotoAndStop(4);
				}
				else if (keyArray[i].currentFrame == 13)
				{
					keyArray[i].gotoAndStop(6);
				}
				else if (keyArray[i].currentFrame == 14)
				{
					keyArray[i].gotoAndStop(7);
				}
				else if (keyArray[i].currentFrame == 15)
				{
					keyArray[i].gotoAndStop(9);
				}
				else if (keyArray[i].currentFrame == 1)
				{
					keyArray[i].gotoAndStop(12);
				}
			}
			player4.x = playerX;
			player4.y = playerY;
			}
			else if(difficulty == 2)
			{
				player4.x = p4CheckpointX;
				player4.y = p4CheckpointY;
			}
			
			numberDeaths ++;
			
			updateScore();
			
			p4TextTime = 0;
		}
		
		public function updateScore():void
		{
			deathsText.text = ("Deaths: " + numberDeaths);
		}
		
		public function nextLevel():void
		{
			currentLevel ++;
			
			blockIdentifier = [];
			
			while (blockHolder.numChildren > 0) 
			{
   				blockHolder.removeChildAt(0);
			}
			
			for (var i = 0; i < keyArray.length; i++)
			{
				keyArray[i].gotoAndStop(17);
			}
			
			keyArray = [];
			
			scrollX = 0;
			scrollY = 0;
		
			xSpeed = 0;
			ySpeed = 0;
			
			keyCount = 0;
			keyTotal = 0;
			
			//then we remake the lvl and reset the lvlHolder
			blockHolder.x = 0;
			
			if(difficulty == 1)
			{
				createLevel();
			}
			else if(difficulty == 2)
			{
				createLevelPlus();
			}
			else
			{
				trace('ERROR');
			}
			
			player.x = playerX;
			player.y = playerY;
			
			goal.x = goalX;
			goal.y = goalY;
			
			pressJump.x = goalX + 12.5;
			pressJump.y = goalY + 12.5;
			
			p1Win = false;
			
			player.gotoAndStop(1);
			
			p1TextTime = 0;
			
			if(numPlayers >= 2)
			{
				player2.x = playerX;
				player2.y = playerY;
				p2Win = false;
				player2.gotoAndStop(1);
				p2TextTime = 0;
			}
			
			if(numPlayers >= 3)
			{
				player3.x = playerX;
				player3.y = playerY;
				p3Win = false;
				player3.gotoAndStop(1);
				p3TextTime = 0;
			}
			
			if(numPlayers >= 4)
			{
				player4.x = playerX;
				player4.y = playerY;
				p4Win = false;
				player4.gotoAndStop(1);
				p4TextTime = 0;
			}
		}
		
		public function checkKeypresses()
		{
			if(key.isDown(37)) //Left
			{
				leftPressed = true;
			}
			else
			{
				leftPressed = false;
			}
			
			if(key.isDown(39)) //Right
			{
				rightPressed = true;
			}
			else
			{
				rightPressed = false;
			}
			
			if(key.isDown(38)) //Up
			{
				upPressed = true;
			}
			else
			{
				upPressed = false;
			}
			
			if(key.isDown(40)) //Down
			{
				downPressed = true;
			}
			else
			{
				downPressed = false;
			}
			
			if(key.isDown(65)) //A
			{
				A_Pressed = true;
			}
			else
			{
				A_Pressed = false;
			}
			
			if(key.isDown(68)) //D
			{
				D_Pressed = true;
			}
			else
			{
				D_Pressed = false;
			}
			
			if(key.isDown(87)) //W
			{
				W_Pressed = true;
			}
			else
			{
				W_Pressed = false;
			}
			
			if(key.isDown(83)) //S
			{
				S_Pressed = true;
			}
			else
			{
				S_Pressed = false;
			}
			
			if(key.isDown(82)) //R
			{
				R_Pressed = true;
			}
			else
			{
				R_Pressed = false;
			}
			
			if(key.isDown(84)) //T
			{
				T_Pressed = true;
			}
			else
			{
				T_Pressed = false;
			}
			
			if(key.isDown(74)) //Left
			{
				J_Pressed = true;
			}
			else
			{
				J_Pressed = false;
			}
			
			if(key.isDown(76)) //Right
			{
				L_Pressed = true;
			}
			else
			{
				L_Pressed = false;
			}
			
			if(key.isDown(73)) //Up
			{
				I_Pressed = true;
			}
			else
			{
				I_Pressed = false;
			}
			
			if(key.isDown(75)) //Down
			{
				K_Pressed = true;
			}
			else
			{
				K_Pressed = false;
			}
			
			if(key.isDown(70)) //Left
			{
				F_Pressed = true;
			}
			else
			{
				F_Pressed = false;
			}
			
			if(key.isDown(72)) //Right
			{
				H_Pressed = true;
			}
			else
			{
				H_Pressed = false;
			}
			
			if(key.isDown(84)) //Up
			{
				T_Pressed = true;
			}
			else
			{
				T_Pressed = false;
			}
			
			if(key.isDown(71)) //Down
			{
				G_Pressed = true;
			}
			else
			{
				G_Pressed = false;
			}
		}
		
		public function keyDownHandler(e:KeyboardEvent)
		{
			if(!p1Win)
			{
				if(e.keyCode == Keyboard.R)
				{
					p1CheckpointX = playerX;
					p1CheckpointY = playerY;
					
					for (var i:int = 0; i < keyArray.length; i++)
					{
						if (keyArray[i].currentFrame == 2)
						{
							keyArray[i].gotoAndStop(16);
						}
						else if (keyArray[i].currentFrame == 6)
						{
							keyArray[i].gotoAndStop(3);
						}
						else if (keyArray[i].currentFrame == 7)
						{
							keyArray[i].gotoAndStop(4);
						}
						else if (keyArray[i].currentFrame == 8)
						{
							keyArray[i].gotoAndStop(5);
						}
						else if (keyArray[i].currentFrame == 12)
						{
							keyArray[i].gotoAndStop(9);
						}
						else if (keyArray[i].currentFrame == 13)
						{
							keyArray[i].gotoAndStop(10);
						}
						else if (keyArray[i].currentFrame == 14)
						{
							keyArray[i].gotoAndStop(11);
						}
						else if (keyArray[i].currentFrame == 1)
						{
							keyArray[i].gotoAndStop(15);
						}
					}
				
					dead();
				}
			}
			
			if(!p2Win)
			{
				if(numPlayers >= 2)
				{
					if(e.keyCode == Keyboard.E)
					{
						p2CheckpointX = playerX;
						p2CheckpointY = playerY;
					
						for (var i2:int = 0; i2 < keyArray.length; i2++)
				{	
					if (keyArray[i2].currentFrame == 3)
					{
						keyArray[i2].gotoAndStop(16);
					}
					else if (keyArray[i2].currentFrame == 6)
					{
						keyArray[i2].gotoAndStop(2);
					}
					else if (keyArray[i2].currentFrame == 9)
					{
						keyArray[i2].gotoAndStop(4);
					}
					else if (keyArray[i2].currentFrame == 10)
					{
						keyArray[i2].gotoAndStop(5);
					}
					else if (keyArray[i2].currentFrame == 12)
					{
						keyArray[i2].gotoAndStop(7);
					}
					else if (keyArray[i2].currentFrame == 13)
					{
						keyArray[i2].gotoAndStop(8);
					}
					else if (keyArray[i2].currentFrame == 15)
					{
						keyArray[i2].gotoAndStop(11);
					}
					else if (keyArray[i2].currentFrame == 1)
					{
						keyArray[i2].gotoAndStop(14);
					}
				}
						dead2();
					}
				}
			}
			
			if(!p3Win)
			{
				if(numPlayers >= 3)
				{
					if(e.keyCode == Keyboard.Y)
					{
						p3CheckpointX = playerX;
						p3CheckpointY = playerY;
					
						for (var i3:int = 0; i3 < keyArray.length; i3++)
			{
				if (keyArray[i3].currentFrame == 4)
				{
					keyArray[i3].gotoAndStop(16);
				}
				else if (keyArray[i3].currentFrame == 7)
				{
					keyArray[i3].gotoAndStop(2);
				}
				else if (keyArray[i3].currentFrame == 9)
				{
					keyArray[i3].gotoAndStop(3);
				}
				else if (keyArray[i3].currentFrame == 11)
				{
					keyArray[i3].gotoAndStop(5);
				}
				else if (keyArray[i3].currentFrame == 12)
				{
					keyArray[i3].gotoAndStop(6);
				}
				else if (keyArray[i3].currentFrame == 14)
				{
					keyArray[i3].gotoAndStop(8);
				}
				else if (keyArray[i3].currentFrame == 15)
				{
					keyArray[i3].gotoAndStop(10);
				}
				else if (keyArray[i3].currentFrame == 1)
				{
					keyArray[i3].gotoAndStop(13);
				}
			}
			
						dead3();
					}
				}
			}
			
			if(!p4Win)
			{
				if(numPlayers >= 4)
				{
					if(e.keyCode == Keyboard.U)
					{
						p4CheckpointX = playerX;
						p4CheckpointY = playerY;
						
					for (var i4:int = 0; i4 < keyArray.length; i4++)
			{
				if (keyArray[i4].currentFrame == 5)
				{
					keyArray[i4].gotoAndStop(16);
				}
				else if (keyArray[i4].currentFrame == 8)
				{
					keyArray[i4].gotoAndStop(2);
				}
				else if (keyArray[i4].currentFrame == 10)
				{
					keyArray[i4].gotoAndStop(3);
				}
				else if (keyArray[i4].currentFrame == 11)
				{
					keyArray[i4].gotoAndStop(4);
				}
				else if (keyArray[i4].currentFrame == 13)
				{
					keyArray[i4].gotoAndStop(6);
				}
				else if (keyArray[i4].currentFrame == 14)
				{
					keyArray[i4].gotoAndStop(7);
				}
				else if (keyArray[i4].currentFrame == 15)
				{
					keyArray[i4].gotoAndStop(9);
				}
				else if (keyArray[i4].currentFrame == 1)
				{
					keyArray[i4].gotoAndStop(12);
				}
			}
			
						dead4();
					}
				}
			}
			
			if(p1Win || p2Win || p3Win || p4Win)
			{
				if(e.keyCode == Keyboard.X)
				{
					p2Win = true;
				}
				
				if(e.keyCode == Keyboard.V)
				{
					p4Win = true;
				}
				
				if(e.keyCode == Keyboard.B)
				{
					p3Win = true;
				}
				
				if(e.keyCode == Keyboard.M)
				{
					p1Win = true;
				}
			}
			
			//Skip
			/*if(e.keyCode == Keyboard.N)
			{
				nextLevel();
			}*/
		}
		
		public function playerLoop(e:Event)
		{			
			checkKeypresses();
			
			if(player.y >= 1100)
			{
				dead();
			}
			
			if(iceBumping.length != 0)
			{
				currentFriction = iceFriction;
			}
			else
			{
				currentFriction = friction;
			}
			
			if(downBumping.length != 0)
			{
				if(upPressed)
				{
					if(!lastUpPressed)
					{
						ySpeed += jumpConstant;
					}
				}
			}
			
			if((!upPressed && downBumping.length == 0) || ySpeed > 0)
			{
				falling = true;
			}
			else
			{
				falling = false;
			}
			
			if(falling)
			{
				ySpeed += 1.6;
			}
			
			if(leftPressed)
			{
				xSpeed -= xSpeedConstant;
			}
			
			if(rightPressed)
			{
				xSpeed += xSpeedConstant;
			}
			
			if(downBumping.length == 0)
			{
				if(ySpeed < 25)
				{
					ySpeed += currentGravity;
					currentGravity *= gravityMultiplier;
				}
			}
			else
			{
				currentGravity = gravity;
			}
			
			if(ySpeed > 25)
			{
				ySpeed = 25;
			}
			
			xSpeed *= currentFriction;
			ySpeed *= currentFriction;
			
			player.x += xSpeed;
			player.y += ySpeed;
			
			lastUpPressed = upPressed;
		}

		public function player2Loop(e:Event)
		{			
			checkKeypresses();
			
			if(player2.y >= 1100)
			{
				dead2();
			}
			
			if(iceBumping2.length != 0)
			{
				currentFriction2 = iceFriction;
			}
			else
			{
				currentFriction2 = friction;
			}
			
			if(downBumping2.length != 0)
			{
				if(W_Pressed)
				{
					if(!lastW_Pressed)
					{
						ySpeed2 += jumpConstant;
					}
				}
			}
			
			if((!W_Pressed && downBumping2.length == 0) || ySpeed2 > 0)
			{
				falling2 = true;
			}
			else
			{
				falling2 = false;
			}
			
			if(falling2)
			{
				ySpeed2 += 1.6;
			}
			
			if(A_Pressed)
			{
				xSpeed2 -= xSpeedConstant;
			}
			
			if(D_Pressed)
			{
				xSpeed2 += xSpeedConstant;
			}
			
			if(downBumping2.length == 0)
			{
				if(ySpeed2 < 25)
				{
					ySpeed2 += currentGravity2;
					currentGravity2 *= gravityMultiplier;
				}
			}
			else
			{
				currentGravity2 = gravity;
			}
			
			if(ySpeed2 > 25)
			{
				ySpeed2 = 25;
			}
			
			xSpeed2 *= currentFriction2;
			ySpeed2 *= currentFriction2;
			
			player2.x += xSpeed2;
			player2.y += ySpeed2;
			
			lastW_Pressed = W_Pressed;
		}
		
		public function player3Loop(e:Event)
		{			
			checkKeypresses();
			
			if(player3.y >= 1100)
			{
				dead3();
			}
			
			if(iceBumping3.length != 0)
			{
				currentFriction3 = iceFriction;
			}
			else
			{
				currentFriction3 = friction;
			}
			
			if(downBumping3.length != 0)
			{
				if(I_Pressed)
				{
					if(!lastI_Pressed)
					{
						ySpeed3 += jumpConstant;
					}
				}
			}
			
			if((!I_Pressed && downBumping3.length == 0) || ySpeed3 > 0)
			{
				falling3 = true;
			}
			else
			{
				falling3 = false;
			}
			
			if(falling3)
			{
				ySpeed3 += 1.6;
			}
			
			if(J_Pressed)
			{
				xSpeed3 -= xSpeedConstant;
			}
			
			if(L_Pressed)
			{
				xSpeed3 += xSpeedConstant;
			}
			
			if(downBumping3.length == 0)
			{
				if(ySpeed3 < 25)
				{
					ySpeed3 += currentGravity3;
					currentGravity3 *= gravityMultiplier;
				}
			}
			else
			{
				currentGravity3 = gravity;
			}
			
			if(ySpeed3 > 25)
			{
				ySpeed3 = 25;
			}
			
			xSpeed3 *= currentFriction3;
			ySpeed3 *= currentFriction3;
			
			player3.x += xSpeed3;
			player3.y += ySpeed3;
			
			lastI_Pressed = I_Pressed;
		}
		
		public function player4Loop(e:Event)
		{			
			checkKeypresses();
			
			if(player4.y >= 1100)
			{
				dead4();
			}
			
			if(iceBumping4.length != 0)
			{
				currentFriction4 = iceFriction;
			}
			else
			{
				currentFriction4 = friction;
			}
			
			if(downBumping4.length != 0)
			{
				if(T_Pressed)
				{
					if(!lastT_Pressed)
					{
						ySpeed4 += jumpConstant;
					}
				}
			}
			
			if((!T_Pressed && downBumping4.length == 0) || ySpeed4 > 0)
			{
				falling4 = true;
			}
			else
			{
				falling4 = false;
			}
			
			if(falling4)
			{
				ySpeed4 += 1.6;
			}
			
			if(F_Pressed)
			{
				xSpeed4 -= xSpeedConstant;
			}
			
			if(H_Pressed)
			{
				xSpeed4 += xSpeedConstant;
			}
			
			if(downBumping4.length == 0)
			{
				if(ySpeed4 < 25)
				{
					ySpeed4 += currentGravity4;
					currentGravity4 *= gravityMultiplier;
				}
			}
			else
			{
				currentGravity4 = gravity;
			}
			
			if(ySpeed4 > 25)
			{
				ySpeed4 = 25;
			}
			
			xSpeed4 *= currentFriction4;
			ySpeed4 *= currentFriction4;
			
			player4.x += xSpeed4;
			player4.y += ySpeed4;
			
			lastT_Pressed = T_Pressed;
		}
		
		public function loop(e:Event)
		{
			if (keyCount == keyTotal && keyCount2 == keyTotal && keyCount3 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(1);
			}
			else if (keyCount == keyTotal && keyCount2 == keyTotal && keyCount3 == keyTotal)
			{
				goal.gotoAndStop(12);
			}
			else if (keyCount == keyTotal && keyCount2 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(13);
			}
			else if (keyCount == keyTotal && keyCount3 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(14);
			}
			else if (keyCount2 == keyTotal && keyCount3 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(15);
			}
			else if (keyCount == keyTotal && keyCount2 == keyTotal)
			{
				goal.gotoAndStop(6);
			}
			else if (keyCount == keyTotal && keyCount3 == keyTotal)
			{
				goal.gotoAndStop(7);
			}
			else if (keyCount == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(8);
			}
			else if (keyCount2 == keyTotal && keyCount3 == keyTotal)
			{
				goal.gotoAndStop(9);
			}
			else if (keyCount2 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(10);
			}
			else if (keyCount3 == keyTotal && keyCount4 == keyTotal)
			{
				goal.gotoAndStop(11);
			}
			else if (keyCount == keyTotal)
			{
				goal.gotoAndStop(2);
			}
			else if (keyCount2 == keyTotal)
			{
				goal.gotoAndStop(3);
			}
			else if (keyCount3 == keyTotal)
			{
				goal.gotoAndStop(4);
			}
			else if (keyCount4 == keyTotal)
			{
				goal.gotoAndStop(5);
			}
			else
			{
				goal.gotoAndStop(16);
			}
			
			if (goal.hitTestObject(player) && (goal.currentFrame == 1 || goal.currentFrame == 2 || goal.currentFrame == 6 || goal.currentFrame == 7 || goal.currentFrame == 8 || goal.currentFrame == 12 || goal.currentFrame == 13 || goal.currentFrame == 14))
			{
				pressJump.gotoAndStop(1);
				
				if(upPressed)
				{
					p1Win = true;
				}
			}
			else
			{
				pressJump.gotoAndStop(2);
			}
			
			keyCount = 0;
			
			for (var i3:int = 0; i3 < keyArray.length; i3++)
			{
				if (keyArray[i3].hitTestObject(player))
				{
					if (keyArray[i3].currentFrame == 16)
					{
						keyArray[i3].gotoAndStop(2);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 3)
					{
						keyArray[i3].gotoAndStop(6);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 4)
					{
						keyArray[i3].gotoAndStop(7);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 5)
					{
						keyArray[i3].gotoAndStop(8);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 9)
					{
						keyArray[i3].gotoAndStop(12);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 10)
					{
						keyArray[i3].gotoAndStop(13);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 11)
					{
						keyArray[i3].gotoAndStop(14);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
					else if (keyArray[i3].currentFrame == 15)
					{
						keyArray[i3].gotoAndStop(1);
						p1CheckpointX = keyArray[i3].x + 12.5;
						p1CheckpointY = keyArray[i3].y + 25;
					}
				}
				
				if (keyArray[i3].currentFrame == 1 || keyArray[i3].currentFrame == 2 || keyArray[i3].currentFrame == 6 || keyArray[i3].currentFrame == 7 || keyArray[i3].currentFrame == 8 || keyArray[i3].currentFrame == 12 || keyArray[i3].currentFrame == 13 || keyArray[i3].currentFrame == 14)
				{
					keyCount ++;
				}
			}
			
			for (var i:int = 0; i < blockHolder.numChildren; i++)
			{
				var hitBlock:DisplayObject = blockHolder.getChildAt(i);
				
				var upBlockTest:Array = [];
				var downBlockTest:Array = [];
				var leftBlockTest:Array = [];
				var rightBlockTest:Array = [];
				
				iceBumping.splice(hitBlock.y);
				downBumping.splice(hitBlock.y);
				
				if (hitBlock.x < player.x + 75 && hitBlock.x > player.x - 75 && hitBlock.y < player.y + 75 && hitBlock.y > player.y - 75)
				{
					
				if (blockIdentifier[i] == 1)
				{
					//Wall
					/*for (var i2 = 0; i2 < blockHolder.numChildren; i2++)
					{
						var hitBlock2:DisplayObject = blockHolder.getChildAt(i2);
						
						upBlockTest.splice(hitBlock2.y);
						downBlockTest.splice(hitBlock2.y);
						leftBlockTest.splice(hitBlock2.y);
						rightBlockTest.splice(hitBlock2.y);
						
						if (blockIdentifier[i] == 1 || blockIdentifier[i2] == 2 || blockIdentifier[i2] == 3 || blockIdentifier[i2] == 4)
						{
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock2.y))
							{
								upBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock.y + 25))
							{
								downBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock2.y))
							{
								leftBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 25, hitBlock2.y + 12.5))
							{
								rightBlockTest.push(hitBlock2.y);
							}
						}
					}*/
					
					if (upBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
						{
							if(ySpeed > 0)
							{
								ySpeed = 0;
						
								player.y = hitBlock.y;
							}
					
							downBumping.push(hitBlock.y);
						}
					}

					if (downBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y - player.height,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y - player.height,true))
						{
							if(ySpeed < 0)
							{
								ySpeed = 0;
						
								player.y = hitBlock.y + hitBlock.height + player.height;
							}
						}
					}
					
					if (rightBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - 3, true))
						{
							if(xSpeed < 0)
							{
								xSpeed = 0;
						
								player.x = hitBlock.x + hitBlock.width + (player.width / 2);
							}
						}
					}

					if (leftBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - 3, true))
						{
							if(xSpeed > 0)
							{
								xSpeed = 0;
							
								player.x = hitBlock.x - (player.width / 2);
							}
						}
					}
				}
				else if (blockIdentifier[i] == 2)
				{
					//Spring
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
					{
						if(ySpeed > 0)
						{
							if(upPressed)
							{
								ySpeed = jumpConstant * 2;
							}
							else
							{
								ySpeed = jumpConstant;
							}
							
							
							player.y = hitBlock.y;
						}
						
						currentGravity = gravity;
						//downBumping.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y - player.height,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y - player.height,true))
					{
						if(ySpeed < 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y + hitBlock.height + player.height;
						}
					}

					if (hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - (player.height / 2), true))
					{
						if(xSpeed < 0)
						{
							xSpeed = 0;
						
							player.x = hitBlock.x + hitBlock.width + (player.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - (player.height / 2), true))
					{
						if(xSpeed > 0)
						{
							xSpeed = 0;
							
							player.x = hitBlock.x - (player.width / 2);
						}
					}
				}
				else if (blockIdentifier[i] == 3)
				{
					//Left conveyor
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
					{
						if(ySpeed > 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y;
						}
						
						xSpeed -= conveyorSpeed;
						
						downBumping.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y - player.height,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y - player.height,true))
					{
						if(ySpeed < 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y + hitBlock.height + player.height;
						}
					}

					if (hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - 3, true))
					{
						if(xSpeed < 0)
						{
							xSpeed = 0;
						
							player.x = hitBlock.x + hitBlock.width + (player.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - 3, true))
					{
						if(xSpeed > 0)
						{
							xSpeed = 0;
							
							player.x = hitBlock.x - (player.width / 2);
						}
					}
				}
				else if (blockIdentifier[i] == 4)
				{
					//Right conveyor
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
					{
						if(ySpeed > 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y;
						}
						
						xSpeed += conveyorSpeed;
					
						downBumping.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y - player.height,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y - player.height,true))
					{
						if(ySpeed < 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y + hitBlock.height + player.height;
						}
					}

					if (hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - 3, true))
					{
						if(xSpeed < 0)
						{
							xSpeed = 0;
						
							player.x = hitBlock.x + hitBlock.width + (player.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - (player.height - 3), true) || hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - 3, true))
					{
						if(xSpeed > 0)
						{
							xSpeed = 0;
							
							player.x = hitBlock.x - (player.width / 2);
						}
					}
				}
				else if (blockIdentifier[i] == 5)
				{
					//Platform
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
					{
						if(downPressed)
						{
							ySpeed = 5;
						}
						else
						{
							if(ySpeed >= 0)
							{
								ySpeed = 0;
						
								player.y = hitBlock.y;
							}
					
							downBumping.push(hitBlock.y);
						}
					}
					
					if (hitBlock.y > player.y && hitBlock.y - 25 < player.y && hitBlock.x <= player.x && hitBlock.x + 25 >= player.x && ySpeed > 0)
					{
						abovePlatform = true;
					}
					
					if (hitBlock.y < player.y && hitBlock.y + 25 > player.y && hitBlock.x <= player.x && hitBlock.x + 25 >= player.x && abovePlatform == true)
					{
						player.y = hitBlock.y;
						abovePlatform = false;
						ySpeed = -2;
					}
				}
				else if (blockIdentifier[i] == 6)
				{
					//Spike
					if (player.hitTestPoint(hitBlock.x, hitBlock.y + 10.75) || player.hitTestPoint(hitBlock.x + 25, hitBlock.y + 10.75) || player.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y) || player.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y + 21.5))
					{
						dead();
					}
				}
				else if (blockIdentifier[i] == 7)
				{
					//Ice
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y,true))
					{
						if(ySpeed > 0)
						{
							ySpeed = 0;
							
							player.y = hitBlock.y;
						}
						
						iceBumping.push(hitBlock.y);
						downBumping.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player.x - ((player.width / 2) - 3),player.y - player.height,true) || hitBlock.hitTestPoint(player.x + ((player.width / 2) - 3),player.y - player.height,true))
					{
						if(ySpeed < 0)
						{
							ySpeed = 0;
						
							player.y = hitBlock.y + hitBlock.height + player.height;
						}
					}

					if (hitBlock.hitTestPoint(player.x - (player.width / 2), player.y - (player.height / 2), true))
					{
						if(xSpeed < 0)
						{
							xSpeed = 0;
						
							player.x = hitBlock.x + hitBlock.width + (player.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player.x + (player.width / 2), player.y - (player.height / 2), true))
					{
						if(xSpeed > 0)
						{
							xSpeed = 0;
							
							player.x = hitBlock.x - (player.width / 2);
						}
					}
				}
				else if (blockIdentifier[i] == 'ENTER')
				{
					//Entrance Portal
					/*if (player.hitTestPoint(hitBlock.x + 12.5, hitBlock.y + 12.5))
					{
						player.x = exitPortalXArray[1];
						player.y = exitPortalYArray[1];
					}*/
				}
			}
			}
			
			if(downBumping.length != 0)
			{
				abovePlatform = false;
			}
			
			//Loop #2
			/*if (keyCount == keyTotal)
			{
				goal.gotoAndStop(1);
			}
			else
			{
				goal.gotoAndStop(2);
			}*/
			if(numPlayers >=2)
			{
			if (goal.hitTestObject(player2) && (goal.currentFrame == 1 || goal.currentFrame == 3 || goal.currentFrame == 6 || goal.currentFrame == 9 || goal.currentFrame == 10 || goal.currentFrame == 12 || goal.currentFrame == 13 || goal.currentFrame == 15))
			{
				pressJump.gotoAndStop(1);
				
				if(W_Pressed)
				{
					p2Win = true;
				}
			}
			
			keyCount2 = 0;
			
			for (var i5:int = 0; i5 < keyArray.length; i5++)
			{
				if (keyArray[i5].hitTestObject(player2))
				{
					if (keyArray[i5].currentFrame == 16)
					{
						keyArray[i5].gotoAndStop(3);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 2)
					{
						keyArray[i5].gotoAndStop(6);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 4)
					{
						keyArray[i5].gotoAndStop(9);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 5)
					{
						keyArray[i5].gotoAndStop(10);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 7)
					{
						keyArray[i5].gotoAndStop(12);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 8)
					{
						keyArray[i5].gotoAndStop(13);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 11)
					{
						keyArray[i5].gotoAndStop(15);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
					else if (keyArray[i5].currentFrame == 14)
					{
						keyArray[i5].gotoAndStop(1);
						p2CheckpointX = keyArray[i5].x + 12.5;
						p2CheckpointY = keyArray[i5].y + 25;
					}
				}
				
				if (keyArray[i5].currentFrame == 1 || keyArray[i5].currentFrame == 3 || keyArray[i5].currentFrame == 6 || keyArray[i5].currentFrame == 9 || keyArray[i5].currentFrame == 10 || keyArray[i5].currentFrame == 12 || keyArray[i5].currentFrame == 13 || keyArray[i5].currentFrame == 15)
				{
					keyCount2 ++;
				}
			}
			
			for (var i4:int = 0; i4 < blockHolder.numChildren; i4++)
			{
				hitBlock = blockHolder.getChildAt(i4);
				
				iceBumping2.splice(hitBlock.y);
				downBumping2.splice(hitBlock.y);
				
				if (hitBlock.x < player2.x + 75 && hitBlock.x > player2.x - 75 && hitBlock.y < player2.y + 75 && hitBlock.y > player2.y - 75)
				{
				
				if (blockIdentifier[i4] == 1)
				{
					//Wall
					/*for (var i2 = 0; i2 < blockHolder.numChildren; i2++)
					{
						var hitBlock2:DisplayObject = blockHolder.getChildAt(i2);
						
						upBlockTest.splice(hitBlock2.y);
						downBlockTest.splice(hitBlock2.y);
						leftBlockTest.splice(hitBlock2.y);
						rightBlockTest.splice(hitBlock2.y);
						
						if (blockIdentifier[i] == 1 || blockIdentifier[i2] == 2 || blockIdentifier[i2] == 3 || blockIdentifier[i2] == 4)
						{
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock2.y))
							{
								upBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock.y + 25))
							{
								downBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 12.5, hitBlock2.y))
							{
								leftBlockTest.push(hitBlock2.y);
							}
							
							if(hitBlock.hitTestPoint(hitBlock2.x + 25, hitBlock2.y + 12.5))
							{
								rightBlockTest.push(hitBlock2.y);
							}
						}
					}*/
					
					if (upBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
						{
							if(ySpeed2 > 0)
							{
								ySpeed2 = 0;
						
								player2.y = hitBlock.y;
							}
					
							downBumping2.push(hitBlock.y);
						}
					}

					if (downBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y - player2.height,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y - player2.height,true))
						{
							if(ySpeed2 < 0)
							{
								ySpeed2 = 0;
						
								player2.y = hitBlock.y + hitBlock.height + player2.height;
							}
						}
					}
					
					if (rightBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - 3, true))
						{
							if(xSpeed2 < 0)
							{
								xSpeed2 = 0;
						
								player2.x = hitBlock.x + hitBlock.width + (player2.width / 2);
							}
						}
					}

					if (leftBlockTest.length == 0)
					{
						if (hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - 3, true))
						{
							if(xSpeed2 > 0)
							{
								xSpeed2 = 0;
							
								player2.x = hitBlock.x - (player2.width / 2);
							}
						}
					}
				}
				else if (blockIdentifier[i4] == 2)
				{
					//Spring
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
					{
						if(ySpeed2 > 0)
						{
							if(W_Pressed)
							{
								ySpeed2 = jumpConstant * 2;
							}
							else
							{
								ySpeed2 = jumpConstant;
							}
							
							
							player2.y = hitBlock.y;
						}
						
						currentGravity2 = gravity;
						//downBumping.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y - player2.height,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y - player2.height,true))
					{
						if(ySpeed2 < 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y + hitBlock.height + player2.height;
						}
					}

					if (hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - (player2.height / 2), true))
					{
						if(xSpeed2 < 0)
						{
							xSpeed2 = 0;
						
							player2.x = hitBlock.x + hitBlock.width + (player2.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - (player2.height / 2), true))
					{
						if(xSpeed2 > 0)
						{
							xSpeed2 = 0;
							
							player2.x = hitBlock.x - (player2.width / 2);
						}
					}
				}
				else if (blockIdentifier[i4] == 3)
				{
					//Left conveyor
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
					{
						if(ySpeed2 > 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y;
						}
						
						xSpeed2 -= conveyorSpeed;
						
						downBumping2.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y - player2.height,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y - player2.height,true))
					{
						if(ySpeed2 < 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y + hitBlock.height + player2.height;
						}
					}

					if (hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - 3, true))
					{
						if(xSpeed2 < 0)
						{
							xSpeed2 = 0;
						
							player2.x = hitBlock.x + hitBlock.width + (player2.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - 3, true))
					{
						if(xSpeed2 > 0)
						{
							xSpeed2 = 0;
							
							player2.x = hitBlock.x - (player2.width / 2);
						}
					}
				}
				else if (blockIdentifier[i4] == 4)
				{
					//Right conveyor
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
					{
						if(ySpeed2 > 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y;
						}
						
						xSpeed2 += conveyorSpeed;
					
						downBumping2.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y - player2.height,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y - player2.height,true))
					{
						if(ySpeed2 < 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y + hitBlock.height + player2.height;
						}
					}

					if (hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - 3, true))
					{
						if(xSpeed2 < 0)
						{
							xSpeed2 = 0;
						
							player2.x = hitBlock.x + hitBlock.width + (player2.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - (player2.height - 3), true) || hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - 3, true))
					{
						if(xSpeed2 > 0)
						{
							xSpeed2 = 0;
							
							player2.x = hitBlock.x - (player2.width / 2);
						}
					}
				}
				else if (blockIdentifier[i4] == 5)
				{
					//Platform
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
					{
						if(S_Pressed)
						{
							ySpeed2 = 5;
						}
						else
						{
							if(ySpeed2 >= 0)
							{
								ySpeed2 = 0;
						
								player2.y = hitBlock.y;
							}
					
							downBumping2.push(hitBlock.y);
						}
					}
					
					if (hitBlock.y > player2.y && hitBlock.y - 25 < player2.y && hitBlock.x <= player2.x && hitBlock.x + 25 >= player2.x && ySpeed2 > 0)
					{
						abovePlatform2 = true;
					}
					
					if (hitBlock.y < player2.y && hitBlock.y + 25 > player2.y && hitBlock.x <= player2.x && hitBlock.x + 25 >= player2.x && abovePlatform2 == true)
					{
						player2.y = hitBlock.y;
						abovePlatform2 = false;
						ySpeed2 = -2;
					}
				}
				else if (blockIdentifier[i4] == 6)
				{
					//Spike
					if (player2.hitTestPoint(hitBlock.x, hitBlock.y + 10.75) || player2.hitTestPoint(hitBlock.x + 25, hitBlock.y + 10.75) || player2.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y) || player2.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y + 21.5))
					{
						dead2();
					}
				}
				else if (blockIdentifier[i4] == 7)
				{
					//Ice
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y,true))
					{
						if(ySpeed2 > 0)
						{
							ySpeed2 = 0;
							
							player2.y = hitBlock.y;
						}
						
						iceBumping2.push(hitBlock.y);
						downBumping2.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player2.x - ((player2.width / 2) - 3),player2.y - player2.height,true) || hitBlock.hitTestPoint(player2.x + ((player2.width / 2) - 3),player2.y - player2.height,true))
					{
						if(ySpeed2 < 0)
						{
							ySpeed2 = 0;
						
							player2.y = hitBlock.y + hitBlock.height + player2.height;
						}
					}

					if (hitBlock.hitTestPoint(player2.x - (player2.width / 2), player2.y - (player2.height / 2), true))
					{
						if(xSpeed2 < 0)
						{
							xSpeed2 = 0;
						
							player2.x = hitBlock.x + hitBlock.width + (player2.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player2.x + (player2.width / 2), player2.y - (player2.height / 2), true))
					{
						if(xSpeed2 > 0)
						{
							xSpeed2 = 0;
							
							player2.x = hitBlock.x - (player2.width / 2);
						}
					}
				}
				else if (blockIdentifier[i4] == 'ENTER')
				{
					//Entrance Portal
					/*if (player.hitTestPoint(hitBlock.x + 12.5, hitBlock.y + 12.5))
					{
						player.x = exitPortalXArray[1];
						player.y = exitPortalYArray[1];
					}*/
				}
			}
			}
			
			if(downBumping2.length != 0)
			{
				abovePlatform2 = false;
			}
			}
			
			//Loop #3
			
			if(numPlayers >= 3)
			{
			if (goal.hitTestObject(player3) && (goal.currentFrame == 1 || goal.currentFrame == 4 || goal.currentFrame == 7 || goal.currentFrame == 9 || goal.currentFrame == 11 || goal.currentFrame == 12 || goal.currentFrame == 14 || goal.currentFrame == 15))
			{
				pressJump.gotoAndStop(1);
				
				if(I_Pressed)
				{
					p3Win = true;
				}
			}
			
			keyCount3 = 0;
			
			for (var i6:int = 0; i6 < keyArray.length; i6++)
			{
				if (keyArray[i6].hitTestObject(player3))
				{
					if (keyArray[i6].currentFrame == 16)
					{
						keyArray[i6].gotoAndStop(4);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 2)
					{
						keyArray[i6].gotoAndStop(7);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 3)
					{
						keyArray[i6].gotoAndStop(9);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 5)
					{
						keyArray[i6].gotoAndStop(11);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 6)
					{
						keyArray[i6].gotoAndStop(12);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 8)
					{
						keyArray[i6].gotoAndStop(14);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 10)
					{
						keyArray[i6].gotoAndStop(15);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
					else if (keyArray[i6].currentFrame == 13)
					{
						keyArray[i6].gotoAndStop(1);
						p3CheckpointX = keyArray[i6].x + 12.5;
						p3CheckpointY = keyArray[i6].y + 25;
					}
				}
				
				if (keyArray[i6].currentFrame == 1 || keyArray[i6].currentFrame == 4 || keyArray[i6].currentFrame == 7 || keyArray[i6].currentFrame == 9 || keyArray[i6].currentFrame == 11 || keyArray[i6].currentFrame == 12 || keyArray[i6].currentFrame == 14 || keyArray[i6].currentFrame == 15)
				{
					keyCount3 ++;
				}
			}
			
			for (var i7:int = 0; i7 < blockHolder.numChildren; i7++)
			{
				hitBlock = blockHolder.getChildAt(i7);
				
				iceBumping3.splice(hitBlock.y);
				downBumping3.splice(hitBlock.y);
				
				if (hitBlock.x < player3.x + 75 && hitBlock.x > player3.x - 75 && hitBlock.y < player3.y + 75 && hitBlock.y > player3.y - 75)
				{
				
				if (blockIdentifier[i7] == 1)
				{
					//Wall
						if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
						{
							if(ySpeed3 > 0)
							{
								ySpeed3 = 0;
						
								player3.y = hitBlock.y;
							}
					
							downBumping3.push(hitBlock.y);
						}

						if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y - player3.height,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y - player3.height,true))
						{
							if(ySpeed3 < 0)
							{
								ySpeed3 = 0;
						
								player3.y = hitBlock.y + hitBlock.height + player3.height;
							}
						}
					
						if (hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - 2, true))
						{
							if(xSpeed3 < 0)
							{
								xSpeed3 = 0;
						
								player3.x = hitBlock.x + hitBlock.width + (player3.width / 2);
							}
						}

						if (hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - 2, true))
						{
							if(xSpeed3 > 0)
							{
								xSpeed3 = 0;
							
								player3.x = hitBlock.x - (player3.width / 2);
							}
						}
				}
				else if (blockIdentifier[i7] == 2)
				{
					//Spring
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
					{
						if(ySpeed3 > 0)
						{
							if(I_Pressed)
							{
								ySpeed3 = jumpConstant * 2;
							}
							else
							{
								ySpeed3 = jumpConstant;
							}
							
							
							player3.y = hitBlock.y;
						}
						
						currentGravity3 = gravity;
						//downBumping.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y - player3.height,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y - player3.height,true))
					{
						if(ySpeed3 < 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y + hitBlock.height + player3.height;
						}
					}

					if (hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - (player3.height / 2), true))
					{
						if(xSpeed3 < 0)
						{
							xSpeed3 = 0;
						
							player3.x = hitBlock.x + hitBlock.width + (player3.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - (player3.height / 2), true))
					{
						if(xSpeed3 > 0)
						{
							xSpeed3 = 0;
							
							player3.x = hitBlock.x - (player3.width / 2);
						}
					}
				}
				else if (blockIdentifier[i7] == 3)
				{
					//Left conveyor
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
					{
						if(ySpeed3 > 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y;
						}
						
						xSpeed3 -= conveyorSpeed;
						
						downBumping3.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y - player3.height,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y - player3.height,true))
					{
						if(ySpeed3 < 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y + hitBlock.height + player3.height;
						}
					}

					if (hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - 2, true))
					{
						if(xSpeed3 < 0)
						{
							xSpeed3 = 0;
						
							player3.x = hitBlock.x + hitBlock.width + (player3.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - 2, true))
					{
						if(xSpeed3 > 0)
						{
							xSpeed3 = 0;
							
							player3.x = hitBlock.x - (player3.width / 2);
						}
					}
				}
				else if (blockIdentifier[i7] == 4)
				{
					//Right conveyor
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
					{
						if(ySpeed3 > 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y;
						}
						
						xSpeed3 += conveyorSpeed;
					
						downBumping3.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y - player3.height,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y - player3.height,true))
					{
						if(ySpeed3 < 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y + hitBlock.height + player3.height;
						}
					}

					if (hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - 2, true))
					{
						if(xSpeed3 < 0)
						{
							xSpeed3 = 0;
						
							player3.x = hitBlock.x + hitBlock.width + (player3.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - (player3.height - 2), true) || hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - 2, true))
					{
						if(xSpeed3 > 0)
						{
							xSpeed3 = 0;
							
							player3.x = hitBlock.x - (player3.width / 2);
						}
					}
				}
				else if (blockIdentifier[i7] == 5)
				{
					//Platform
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
					{
						if(K_Pressed)
						{
							ySpeed3 = 5;
						}
						else
						{
							if(ySpeed3 >= 0)
							{
								ySpeed3 = 0;
						
								player3.y = hitBlock.y;
							}
					
							downBumping3.push(hitBlock.y);
						}
					}

					
					if (hitBlock.y > player3.y && hitBlock.y - 25 < player3.y && hitBlock.x <= player3.x && hitBlock.x + 25 >= player3.x && ySpeed3 > 0)
					{
						abovePlatform3 = true;
					}
					
					if (hitBlock.y < player3.y && hitBlock.y + 25 > player3.y && hitBlock.x <= player3.x && hitBlock.x + 25 >= player3.x && abovePlatform3 == true)
					{
						player3.y = hitBlock.y;
						abovePlatform3 = false;
						ySpeed3 = -2;
					}
				}
				else if (blockIdentifier[i7] == 6)
				{
					//Spike
					if (player3.hitTestPoint(hitBlock.x, hitBlock.y + 10.75) || player3.hitTestPoint(hitBlock.x + 25, hitBlock.y + 10.75) || player3.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y) || player3.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y + 21.5))
					{
						dead3();
					}
				}
				else if (blockIdentifier[i7] == 7)
				{
					//Ice
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y,true))
					{
						if(ySpeed3 > 0)
						{
							ySpeed3 = 0;
							
							player3.y = hitBlock.y;
						}
						
						iceBumping3.push(hitBlock.y);
						downBumping3.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player3.x - ((player3.width / 2) - 2),player3.y - player3.height,true) || hitBlock.hitTestPoint(player3.x + ((player3.width / 2) - 2),player3.y - player3.height,true))
					{
						if(ySpeed3 < 0)
						{
							ySpeed3 = 0;
						
							player3.y = hitBlock.y + hitBlock.height + player3.height;
						}
					}

					if (hitBlock.hitTestPoint(player3.x - (player3.width / 2), player3.y - (player3.height / 2), true))
					{
						if(xSpeed3 < 0)
						{
							xSpeed3 = 0;
						
							player3.x = hitBlock.x + hitBlock.width + (player3.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player3.x + (player3.width / 2), player3.y - (player3.height / 2), true))
					{
						if(xSpeed3 > 0)
						{
							xSpeed3 = 0;
							
							player3.x = hitBlock.x - (player3.width / 2);
						}
					}
				}
				else if (blockIdentifier[i7] == 'ENTER')
				{
					//Entrance Portal
					/*if (player.hitTestPoint(hitBlock.x + 12.5, hitBlock.y + 12.5))
					{
						player.x = exitPortalXArray[1];
						player.y = exitPortalYArray[1];
					}*/
				}
			}
			}
			
			if(downBumping3.length != 0)
			{
				abovePlatform3 = false;
			}
			}
			
			//Loop #4
			
			if(numPlayers >= 4)
			{
			if (goal.hitTestObject(player4) && (goal.currentFrame == 1 || goal.currentFrame == 5 || goal.currentFrame == 8 || goal.currentFrame == 10 || goal.currentFrame == 11 || goal.currentFrame == 13 || goal.currentFrame == 14 || goal.currentFrame == 15))
			{
				pressJump.gotoAndStop(1);
				
				if(T_Pressed)
				{
					p4Win = true;
				}
			}
			
			keyCount4 = 0;
			
			for (var i8:int = 0; i8 < keyArray.length; i8++)
			{
				if (keyArray[i8].hitTestObject(player4))
				{
					if (keyArray[i8].currentFrame == 16)
					{
						keyArray[i8].gotoAndStop(5);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 2)
					{
						keyArray[i8].gotoAndStop(8);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 3)
					{
						keyArray[i8].gotoAndStop(10);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 4)
					{
						keyArray[i8].gotoAndStop(11);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 6)
					{
						keyArray[i8].gotoAndStop(13);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 7)
					{
						keyArray[i8].gotoAndStop(14);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 9)
					{
						keyArray[i8].gotoAndStop(15);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
					else if (keyArray[i8].currentFrame == 12)
					{
						keyArray[i8].gotoAndStop(1);
						p4CheckpointX = keyArray[i8].x + 12.5;
						p4CheckpointY = keyArray[i8].y + 25;
					}
				}
				
				if (keyArray[i8].currentFrame == 1 || keyArray[i8].currentFrame == 5 || keyArray[i8].currentFrame == 8 || keyArray[i8].currentFrame == 10 || keyArray[i8].currentFrame == 11 || keyArray[i8].currentFrame == 13 || keyArray[i8].currentFrame == 14 || keyArray[i8].currentFrame == 15)
				{
					keyCount4 ++;
				}
			}
			
			for (var i9:int = 0; i9 < blockHolder.numChildren; i9++)
			{
				hitBlock = blockHolder.getChildAt(i9);
				
				iceBumping4.splice(hitBlock.y);
				downBumping4.splice(hitBlock.y);
				
				if (hitBlock.x < player4.x + 75 && hitBlock.x > player4.x - 75 && hitBlock.y < player4.y + 75 && hitBlock.y > player4.y - 75)
				{
				
				if (blockIdentifier[i9] == 1)
				{
					//Wall
						if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
						{
							if(ySpeed4 > 0)
							{
								ySpeed4 = 0;
						
								player4.y = hitBlock.y;
							}
					
							downBumping4.push(hitBlock.y);
						}

						if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y - player4.height,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y - player4.height,true))
						{
							if(ySpeed4 < 0)
							{
								ySpeed4 = 0;
						
								player4.y = hitBlock.y + hitBlock.height + player4.height;
							}
						}
					
						if (hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - 2, true))
						{
							if(xSpeed4 < 0)
							{
								xSpeed4 = 0;
						
								player4.x = hitBlock.x + hitBlock.width + (player4.width / 2);
							}
						}

						if (hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - 2, true))
						{
							if(xSpeed4 > 0)
							{
								xSpeed4 = 0;
							
								player4.x = hitBlock.x - (player4.width / 2);
							}
						}
				}
				else if (blockIdentifier[i9] == 2)
				{
					//Spring
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
					{
						if(ySpeed4 > 0)
						{
							if(T_Pressed)
							{
								ySpeed4 = jumpConstant * 2;
							}
							else
							{
								ySpeed4 = jumpConstant;
							}
							
							
							player4.y = hitBlock.y;
						}
						
						currentGravity4 = gravity;
						//downBumping.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y - player4.height,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y - player4.height,true))
					{
						if(ySpeed4 < 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y + hitBlock.height + player4.height;
						}
					}

					if (hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - (player4.height / 2), true))
					{
						if(xSpeed4 < 0)
						{
							xSpeed4 = 0;
						
							player4.x = hitBlock.x + hitBlock.width + (player4.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - (player4.height / 2), true))
					{
						if(xSpeed4 > 0)
						{
							xSpeed4 = 0;
							
							player4.x = hitBlock.x - (player4.width / 2);
						}
					}
				}
				else if (blockIdentifier[i9] == 3)
				{
					//Left conveyor
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
					{
						if(ySpeed4 > 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y;
						}
						
						xSpeed4 -= conveyorSpeed;
						
						downBumping4.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y - player4.height,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y - player4.height,true))
					{
						if(ySpeed4 < 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y + hitBlock.height + player4.height;
						}
					}

					if (hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - 2, true))
					{
						if(xSpeed4 < 0)
						{
							xSpeed4 = 0;
						
							player4.x = hitBlock.x + hitBlock.width + (player4.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - 2, true))
					{
						if(xSpeed4 > 0)
						{
							xSpeed4 = 0;
							
							player4.x = hitBlock.x - (player4.width / 2);
						}
					}
				}
				else if (blockIdentifier[i9] == 4)
				{
					//Right conveyor
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
					{
						if(ySpeed4 > 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y;
						}
						
						xSpeed4 += conveyorSpeed;
					
						downBumping4.push(hitBlock.y);
					}

					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y - player4.height,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y - player4.height,true))
					{
						if(ySpeed4 < 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y + hitBlock.height + player4.height;
						}
					}

					if (hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - 2, true))
					{
						if(xSpeed4 < 0)
						{
							xSpeed4 = 0;
						
							player4.x = hitBlock.x + hitBlock.width + (player4.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - (player4.height - 2), true) || hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - 2, true))
					{
						if(xSpeed4 > 0)
						{
							xSpeed4 = 0;
							
							player4.x = hitBlock.x - (player4.width / 2);
						}
					}
				}
				else if (blockIdentifier[i9] == 5)
				{
					//Platform
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
					{
						if(G_Pressed)
						{
							ySpeed4 = 5;
						}
						else
						{
							if(ySpeed4 >= 0)
							{
								ySpeed4 = 0;
						
								player4.y = hitBlock.y;
							}
					
							downBumping4.push(hitBlock.y);
						}
					}

					
					if (hitBlock.y > player4.y && hitBlock.y - 25 < player4.y && hitBlock.x <= player4.x && hitBlock.x + 25 >= player4.x && ySpeed4 > 0)
					{
						abovePlatform4 = true;
					}
					
					if (hitBlock.y < player4.y && hitBlock.y + 25 > player4.y && hitBlock.x <= player4.x && hitBlock.x + 25 >= player4.x && abovePlatform4 == true)
					{
						player4.y = hitBlock.y;
						abovePlatform4 = false;
						ySpeed4 = -2;
					}
				}
				else if (blockIdentifier[i9] == 6)
				{
					//Spike
					if (player4.hitTestPoint(hitBlock.x, hitBlock.y + 10.75) || player4.hitTestPoint(hitBlock.x + 25, hitBlock.y + 10.75) || player4.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y) || player4.hitTestPoint((hitBlock.x + 8 || hitBlock.x + 17), hitBlock.y + 21.5))
					{
						dead4();
					}
				}
				else if (blockIdentifier[i9] == 7)
				{
					//Ice
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y,true))
					{
						if(ySpeed4 > 0)
						{
							ySpeed4 = 0;
							
							player4.y = hitBlock.y;
						}
						
						iceBumping4.push(hitBlock.y);
						downBumping4.push(hitBlock.y);
					}
					
					if (hitBlock.hitTestPoint(player4.x - ((player4.width / 2) - 2),player4.y - player4.height,true) || hitBlock.hitTestPoint(player4.x + ((player4.width / 2) - 2),player4.y - player4.height,true))
					{
						if(ySpeed4 < 0)
						{
							ySpeed4 = 0;
						
							player4.y = hitBlock.y + hitBlock.height + player4.height;
						}
					}

					if (hitBlock.hitTestPoint(player4.x - (player4.width / 2), player4.y - (player4.height / 2), true))
					{
						if(xSpeed4 < 0)
						{
							xSpeed4 = 0;
						
							player4.x = hitBlock.x + hitBlock.width + (player4.width / 2);
						}
					}

					if (hitBlock.hitTestPoint(player4.x + (player4.width / 2), player4.y - (player4.height / 2), true))
					{
						if(xSpeed4 > 0)
						{
							xSpeed4 = 0;
							
							player4.x = hitBlock.x - (player4.width / 2);
						}
					}
				}
			}
			}
			
			if(downBumping4.length != 0)
			{
				abovePlatform4 = false;
			}
			}
			
			p1Forfeit.x = player.x;
			p1Forfeit.y = player.y - 25;
			
			if(numPlayers >= 2)
			{
				p2Forfeit.x = player2.x;
				p2Forfeit.y = player2.y - 25;
			}
			
			if(numPlayers >= 3)
			{
				p3Forfeit.x = player3.x;
				p3Forfeit.y = player3.y - 25;
			}
			
			if(numPlayers >= 4)
			{
				p4Forfeit.x = player4.x;
				p4Forfeit.y = player4.y - 25;
			}
			
			if(numPlayers == 1)
			{
				if(p1Win)
				{
					nextLevel();
				}
			}
			else if(numPlayers == 2)
			{
				if(p1Win && p2Win)
				{
					nextLevel();
				}
			}
			else if(numPlayers == 3)
			{
				if(p1Win && p2Win && p3Win)
				{
					nextLevel();
				}
			}
			else if(numPlayers == 4)
			{
				if(p1Win && p2Win && p3Win && p4Win)
				{
					nextLevel();
				}
			}
			
			if(!p1Win && !p2Win && !p3Win && !p4Win)
			{
				p1Forfeit.gotoAndStop(2);
				player.gotoAndStop(1);
				
				if(numPlayers >= 2)
				{
					p2Forfeit.gotoAndStop(2);
					player2.gotoAndStop(1);
				}
				
				if(numPlayers >= 3)
				{
					p3Forfeit.gotoAndStop(2);
					player3.gotoAndStop(1);
				}
				
				if(numPlayers >= 4)
				{
					p4Forfeit.gotoAndStop(2);
					player4.gotoAndStop(1);
				}
			}
			
			if(p1Win || p2Win || p3Win || p4Win)
			{
				p1Forfeit.gotoAndStop(1);
				
				if(numPlayers >= 2)
				{
					p2Forfeit.gotoAndStop(1);
				}
				
				if(numPlayers >= 3)
				{
					p3Forfeit.gotoAndStop(1);
				}
				
				if(numPlayers >= 4)
				{
					p4Forfeit.gotoAndStop(1);
				}
				
				if(p1Win)
				{
					player.gotoAndStop(2);
					p1Forfeit.gotoAndStop(2);
					player.x = 0;
					player.y = 0;
				}
				
				if(p2Win)
				{
					player2.gotoAndStop(2);
					p2Forfeit.gotoAndStop(2);
					player2.x = 0;
					player2.y = 0;
				}
				
				if(p3Win)
				{
					player3.gotoAndStop(2);
					p3Forfeit.gotoAndStop(2);
					player3.x = 0;
					player3.y = 0;
				}
				
				if(p4Win)
				{
					player4.gotoAndStop(2);
					p4Forfeit.gotoAndStop(2);
					player4.x = 0;
					player4.y = 0;
				}
				
				if(p1Forfeit.currentFrame == 1)
				{
					p1TextTime ++;
					
					if(p1TextTime >= 288)
					{
						p1Forfeit.gotoAndStop(2);
					}
				}
				
				if(numPlayers >= 2)
				{
					if(p2Forfeit.currentFrame == 1)
					{
						p2TextTime ++;
					
						if(p2TextTime >= 288)
						{
							p2Forfeit.gotoAndStop(2);
						}
					}
				}
				
				if(numPlayers >= 3)
				{
					if(p3Forfeit.currentFrame == 1)
					{
						p3TextTime ++;
					
						if(p3TextTime >= 288)
						{
							p3Forfeit.gotoAndStop(2);
						}
					}
				}
				
				if(numPlayers >= 4)
				{
					if(p4Forfeit.currentFrame == 1)
					{
						p4TextTime ++;
					
						if(p4TextTime >= 288)
						{
							p4Forfeit.gotoAndStop(2);
						}
					}
				}
			}
			
			if(!musicPlaying)
			{
				if(currentLevel == 1)
				{
					sndChn_ChibiNinja.stop();
					snd_DigitalNative.addEventListener(Event.COMPLETE, load_DigitalNative);
					snd_DigitalNative.load(req_DigitalNative);
				}
				else if(currentLevel == 2)
				{
					sndChn_DigitalNative.stop();
					snd_AllofUs.addEventListener(Event.COMPLETE, load_AllofUs);
					snd_AllofUs.load(req_AllofUs);
				}
				else if(currentLevel == 3)
				{
					sndChn_AllofUs.stop();
					snd_ComeandFindMe.addEventListener(Event.COMPLETE, load_ComeandFindMe);
					snd_ComeandFindMe.load(req_ComeandFindMe);
				}
				else if(currentLevel == 4)
				{
					sndChn_ComeandFindMe.stop();
					snd_ANightOfDizzySpells.addEventListener(Event.COMPLETE, load_ANightOfDizzySpells);
					snd_ANightOfDizzySpells.load(req_ANightOfDizzySpells);
				}
				else if(currentLevel == 5)
				{
					sndChn_ANightOfDizzySpells.stop();
					snd_HHavok.addEventListener(Event.COMPLETE, load_HHavok);
					snd_HHavok.load(req_HHavok);
				}
				else if(currentLevel == 6)
				{
					sndChn_HHavok.stop();
					snd_SingleTone.addEventListener(Event.COMPLETE, load_SingleTone);
					snd_SingleTone.load(req_SingleTone);
				}
				
				musicPlaying = true;
			}
		}
	}
}